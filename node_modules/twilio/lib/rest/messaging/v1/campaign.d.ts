/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import { SerializableClass } from '../../../interfaces';

type CampaignStatus = 'approved'|'pending'|'failed';

/**
 * Initialize the CampaignList
 *
 * PLEASE NOTE that this class contains beta products that are subject to change.
 * Use them with caution.
 *
 * @param version - Version of the resource
 */
declare function CampaignList(version: V1): CampaignListInstance;

interface CampaignListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): CampaignContext;
  /**
   * create a CampaignInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: CampaignListInstanceCreateOptions, callback?: (error: Error | null, item: CampaignInstance) => any): Promise<CampaignInstance>;
  /**
   * Streams CampaignInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Function to process each record
   */
  each(callback?: (item: CampaignInstance, done: (err?: Error) => void) => void): void;
  /**
   * Streams CampaignInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: CampaignListInstanceEachOptions, callback?: (item: CampaignInstance, done: (err?: Error) => void) => void): void;
  /**
   * Constructs a campaign
   *
   * @param sid - The SID that identifies the resource to fetch
   */
  get(sid: string): CampaignContext;
  /**
   * Retrieve a single target page of CampaignInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Callback to handle list of records
   */
  getPage(callback?: (error: Error | null, items: CampaignPage) => any): Promise<CampaignPage>;
  /**
   * Retrieve a single target page of CampaignInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: CampaignPage) => any): Promise<CampaignPage>;
  /**
   * Lists CampaignInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Callback to handle list of records
   */
  list(callback?: (error: Error | null, items: CampaignInstance[]) => any): Promise<CampaignInstance[]>;
  /**
   * Lists CampaignInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: CampaignListInstanceOptions, callback?: (error: Error | null, items: CampaignInstance[]) => any): Promise<CampaignInstance[]>;
  /**
   * Retrieve a single page of CampaignInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Callback to handle list of records
   */
  page(callback?: (error: Error | null, items: CampaignPage) => any): Promise<CampaignPage>;
  /**
   * Retrieve a single page of CampaignInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: CampaignListInstancePageOptions, callback?: (error: Error | null, items: CampaignPage) => any): Promise<CampaignPage>;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}

/**
 * Options to pass to create
 *
 * @property brandRegistrationSid - A2P BrandRegistration Sid
 * @property description - A short description of what this SMS campaign does
 * @property hasEmbeddedLinks - Indicate that this SMS campaign will send messages that contain links
 * @property hasEmbeddedPhone - Indicates that this SMS campaign will send messages that contain phone numbers
 * @property messageSamples - Message samples
 * @property messagingServiceSid - MessagingService SID
 * @property useCase - A2P Campaign UseCase.
 */
interface CampaignListInstanceCreateOptions {
  brandRegistrationSid: string;
  description: string;
  hasEmbeddedLinks: boolean;
  hasEmbeddedPhone: boolean;
  messageSamples: string | string[];
  messagingServiceSid: string;
  useCase: string;
}

/**
 * Options to pass to each
 *
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 */
interface CampaignListInstanceEachOptions {
  callback?: (item: CampaignInstance, done: (err?: Error) => void) => void;
  done?: Function;
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to list
 *
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
interface CampaignListInstanceOptions {
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to page
 *
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 * @property pageToken - PageToken provided by the API
 */
interface CampaignListInstancePageOptions {
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
}

interface CampaignPayload extends CampaignResource, Page.TwilioResponsePayload {
}

interface CampaignResource {
  account_sid: string;
  brand_registration_sid: string;
  date_created: Date;
  date_updated: Date;
  description: string;
  failure_reason: string;
  has_embedded_links: boolean;
  has_embedded_phone: boolean;
  message_samples: string[];
  messaging_service_sid: string;
  sid: string;
  status: CampaignStatus;
  url: string;
  use_case: string;
}

interface CampaignSolution {
}


declare class CampaignContext {
  /**
   * Initialize the CampaignContext
   *
   * PLEASE NOTE that this class contains beta products that are subject to change.
   * Use them with caution.
   *
   * @param version - Version of the resource
   * @param sid - The SID that identifies the resource to fetch
   */
  constructor(version: V1, sid: string);

  /**
   * fetch a CampaignInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: CampaignInstance) => any): Promise<CampaignInstance>;
  /**
   * remove a CampaignInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: CampaignInstance) => any): Promise<boolean>;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}


declare class CampaignInstance extends SerializableClass {
  /**
   * Initialize the CampaignContext
   *
   * PLEASE NOTE that this class contains beta products that are subject to change.
   * Use them with caution.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The SID that identifies the resource to fetch
   */
  constructor(version: V1, payload: CampaignPayload, sid: string);

  private _proxy: CampaignContext;
  accountSid: string;
  brandRegistrationSid: string;
  dateCreated: Date;
  dateUpdated: Date;
  description: string;
  failureReason: string;
  /**
   * fetch a CampaignInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: CampaignInstance) => any): Promise<CampaignInstance>;
  hasEmbeddedLinks: boolean;
  hasEmbeddedPhone: boolean;
  messageSamples: string[];
  messagingServiceSid: string;
  /**
   * remove a CampaignInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback?: (error: Error | null, items: CampaignInstance) => any): Promise<boolean>;
  sid: string;
  status: CampaignStatus;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  url: string;
  useCase: string;
}


declare class CampaignPage extends Page<V1, CampaignPayload, CampaignResource, CampaignInstance> {
  /**
   * Initialize the CampaignPage
   *
   * PLEASE NOTE that this class contains beta products that are subject to change.
   * Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: CampaignSolution);

  /**
   * Build an instance of CampaignInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: CampaignPayload): CampaignInstance;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}

export { CampaignContext, CampaignInstance, CampaignList, CampaignListInstance, CampaignListInstanceCreateOptions, CampaignListInstanceEachOptions, CampaignListInstanceOptions, CampaignListInstancePageOptions, CampaignPage, CampaignPayload, CampaignResource, CampaignSolution, CampaignStatus }
